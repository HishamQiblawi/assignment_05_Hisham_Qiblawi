class FamilyMember:
  def __init__(self, name, family_name, birthdate):
      """
      Constructor initializes a FamilyMember with a name, family name, birthdate,
      and an empty list for children.
      """
      self.name = name
      self.family_name = family_name
      self.birthdate = birthdate
      self.children = []

def add_family_member(parent, name, family_name, birthdate):
  """
  Function to add a new family member under a given parent.
  """
  new_member = FamilyMember(name, family_name, birthdate)
  parent.children.append(new_member)
  return new_member

def display_sorted_birthdays(node):
  """
  Function to display birthdays of family members in sorted order.
  """
  birthdays = []

  def collect_birthdays(member):
      """
      Recursive function to collect birthdays of family members.
      """
      birthdays.append((member.name, member.birthdate))
      for child in member.children:
          collect_birthdays(child)

  collect_birthdays(node)
  sorted_birthdays = sorted(birthdays, key=get_birthdate)

  for name, birthday in sorted_birthdays:
      print(name + " - " + birthday)

def get_birthdate(member):
  """
  Helper function to get the birthdate from a tuple.
  """
  return member[1]

def find_relationship(node, target_name):
  """
  Function to find the relationship between the root node and a target family member.
  """
  if node.name == target_name:
      return "Self"

  for child in node.children:
      relationship = find_relationship(child, target_name)
      if relationship:
          return "Child of " + node.name + ", " + relationship

  return ""

def visualize_family_tree(node, level=0):
  """
  Function to visualize the family tree hierarchy.
  """
  print("  " * level + node.name + " " + node.family_name + " - " + node.birthdate)
  for child in node.children:
      visualize_family_tree(child, level + 1)

def count_same_first_names(node, target_name):
  """
  Function to count family members with the same first name.
  """
  count = 0

  def count_names(member):
      """
      Recursive function to count family members with the same first name.
      """
      nonlocal count
      if member.name == target_name:
          count += 1
      for child in member.children:
          count_names(child)

  count_names(node)
  return count

# Example Usage:
root = FamilyMember("John", "Doe", "1990-01-01")

while True:
  # Displaying the menu for user choices
  print("\n1. Add Family Member\n2. Display Sorted Birthdays\n3. Find Relationship\n"
        "4. Visualize Family Tree\n5. Count Same First Names\n6. Exit")

  # User input for their choice
  choice = int(input("Enter your choice: "))

  if choice == 1:
      # Option to add a family member
      parent_name = input("Enter parent's name: ")
      parent = find_relationship(root, parent_name)
      if parent:
          name = input("Enter member's name: ")
          family_name = input("Enter member's family name: ")
          birthdate = input("Enter member's birthdate: ")
          add_family_member(parent, name, family_name, birthdate)
          print("Family member added successfully!")
      else:
          print("Parent not found.")
  elif choice == 2:
      # Option to display sorted birthdays
      print("Sorted Birthdays:")
      display_sorted_birthdays(root)
  elif choice == 3:
      # Option to find the relationship between two family members
      target_name1 = input("Enter first target member's name: ")
      target_name2 = input("Enter second target member's name: ")

      relationship1 = find_relationship(root, target_name1)
      relationship2 = find_relationship(root, target_name2)

      if relationship1 and relationship2:
          common_ancestor = ""
          ancestors1 = relationship1.split(",")[1:]
          ancestors2 = relationship2.split(",")[1:]

          for i in range(min(len(ancestors1), len(ancestors2))):
              if ancestors1[i].strip() == ancestors2[i].strip():
                  common_ancestor = ancestors1[i].strip()
              else:
                  break

          if common_ancestor:
              depth1 = len(ancestors1) - 1
              depth2 = len(ancestors2) - 1
              depth_difference = abs(depth1 - depth2)

              relationship = "Great" * depth_difference + ("Grandchild" if depth1 > depth2 else "Grandparent") + " of " + common_ancestor if depth_difference > 0 else "Sibling"

              print(relationship)
          else:
              print("No common ancestor found.")
      else:
          print("One or both members not found.")
  elif choice == 4:
      # Option to visualize the family tree hierarchy
      print("Visualizing Family Tree:")
      visualize_family_tree(root)
  elif choice == 5:
      # Option to count family members with the same first name
      target_name = input("Enter target name to count: ")
      count = count_same_first_names(root, target_name)
      print("There are " + str(count) + " members with the same first name.")
  elif choice == 6:
      # Option to exit the program
      print("Exiting the program.")
      break
  else:
      # Handling invalid choices
      print("Invalid choice. Please enter a number between 1 and 6.")















#q02
class SocialMediaPlatform:
  def __init__(self):
      # Constructor initializes an instance of SocialMediaPlatform with dictionaries for users and friendships.
      self.users = {}         # Dictionary to store users with usernames as keys and unique identifiers as values.
      self.friendships = {}    # Dictionary to store friendships with usernames as keys and lists of friends as values.

  def add_user(self, username):
      while username in self.users:
          # Check if the username already exists, prompt for another if it does.
          print("Error: User already exists.")
          username = input("Please enter another username: ")

      self.users[username] = len(self.users) + 1    # Assign a unique identifier to the new user.
      self.friendships[username] = []               # Initialize an empty list for the new user's friendships.
      print("User '" + username + "' added successfully.")

  def remove_user(self, username):
      if username in self.users:
          # Check if the user exists before removing.
          del self.users[username]
          friends_to_remove = self.friendships[username]
          del self.friendships[username]

          for friend in friends_to_remove:
              # Remove user from friends' lists.
              self.friendships[friend].remove(username)

          print("User '" + username + "' removed successfully.")
      else:
          print("Error: User not found. Please make sure of the username.")

  def send_friend_request(self, sender, receiver):
      if sender in self.users and receiver in self.users:
          # Check if both sender and receiver exist before processing the friend request.
          if receiver not in self.friendships[sender]:
              # Check if the friend request is not a duplicate.
              self.friendships[sender].append(receiver)
              print("Friend request sent successfully.")
          else:
              print("Error: Friend request already sent.")
      else:
          print("Error: Invalid usernames.")

  def remove_friend(self, username, friend):
      if username in self.users and friend in self.users:
          # Check if both usernames exist before attempting to remove friendship.
          if friend in self.friendships[username]:
              self.friendships[username].remove(friend)
              self.friendships[friend].remove(username)
              print("Friend connection removed successfully.")
          else:
              print("Error: Users are not connected.")
      else:
          print("Error: Invalid usernames.")

  def view_friends(self, username):
      if username in self.users:
          # Check if the user exists before displaying their friends.
          friends = self.friendships[username]
          if friends:
              print("Friends of '" + username + "': " + str(friends))
          else:
              print("No friends for '" + username + "'. You can send friend requests!")
      else:
          print("Error: User not found.")

  def view_all_users(self):
      if self.users:
          # Check if there are users before displaying the list.
          print("List of all users: " + str(list(self.users.keys())))
      else:
          print("No users on the platform.")

# Example usage:
platform = SocialMediaPlatform()

while True:
  print("\n1. Add User\n2. Remove User\n3. Send Friend Request\n4. Remove Friend\n"
        "5. View Friends\n6. View All Users\n7. Exit")

  choice = input("Enter a choice: ")

  if choice == '1':
      # Option to add a new user.
      username = input("Enter username: ")
      platform.add_user(username)

  elif choice == '2':
      # Option to remove a user.
      username = input("Enter username: ")
      platform.remove_user(username)

  elif choice == '3':
      # Option to send a friend request.
      sender = input("Enter your username: ")
      receiver = input("Enter friend's username: ")
      platform.send_friend_request(sender, receiver)

  elif choice == '4':
      # Option to remove a friend.
      username = input("Enter your username: ")
      friend = input("Enter friend's username: ")
      platform.remove_friend(username, friend)

  elif choice == '5':
      # Option to view a user's friends.
      username = input("Enter your username: ")
      platform.view_friends(username)

  elif choice == '6':
      # Option to view all users on the platform.
      platform.view_all_users()

  elif choice == '7':
      # Option to exit the program.
      print("Exiting program. Goodbye!")
      break

  else:
      # Handling invalid choices.
      print("Invalid choice. Please enter a valid option.")
